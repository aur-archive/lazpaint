diff -rupN bgrabitmap7.2/bgrabitmaptypes.pas bgrabitmap7.2p/bgrabitmaptypes.pas
--- bgrabitmap7.2/bgrabitmaptypes.pas	2013-03-16 10:22:00.000000000 +0100
+++ bgrabitmap7.2p/bgrabitmaptypes.pas	2013-08-20 14:31:47.000000000 +0200
@@ -2780,18 +2780,19 @@ begin
 end;
 
 function VectLen(v: TPointF): single;
-begin
-  result := sqrt(v.x*v.x+v.y*v.y);
-end;
-
-function IntersectLine(line1, line2: TLineDef): TPointF;
-var parallel: boolean;
-begin
-  result := IntersectLine(line1,line2,parallel);
-end;
-
-function IntersectLine(line1, line2: TLineDef; out parallel: boolean): TPointF;
-var divFactor: double;
+begin
+  result := sqrt(v.x*v.x+v.y*v.y);
+end;
+{$OPTIMIZATION OFF}  // Modif J.P  5/2013
+function IntersectLine(line1, line2: TLineDef): TPointF;
+var parallel: boolean;
+begin
+  result := IntersectLine(line1,line2,parallel);
+end;
+{$OPTIMIZATION ON}
+
+function IntersectLine(line1, line2: TLineDef; out parallel: boolean): TPointF;
+var divFactor: double;
 begin
   parallel := false;
   //if lines are parallel
@@ -3154,7 +3155,7 @@ initialization
   CSSColors.Finished;
 
 finalization
-
-  CSSColors.Free;
-
-end.
+
+  CSSColors.Free;
+
+end.
diff -rupN bgrabitmap7.2/bgrascene3dinterface.inc bgrabitmap7.2p/bgrascene3dinterface.inc
--- bgrabitmap7.2/bgrascene3dinterface.inc	2012-07-22 16:25:52.000000000 +0200
+++ bgrabitmap7.2p/bgrascene3dinterface.inc	2013-08-20 14:31:34.000000000 +0200
@@ -270,13 +270,13 @@ type
     procedure SetColor(const AValue: TBGRAPixel);
     procedure SetLight(const AValue: Single);
     procedure SetLightingNormal(const AValue: TLightingNormal3D);
-    procedure SetMaterial(const AValue: IBGRAMaterial3D);
-    procedure SetParentLighting(const AValue: boolean);
-    procedure SetTexture(const AValue: IBGRAScanner);
-    procedure ComputeWithMatrix(const AMatrix: TMatrix3D; const AProjection: TProjection3D);
-    procedure RemoveUnusedVertices;
-    function AddFaceReversed(const AVertices: array of IBGRAVertex3D): IBGRAFace3D;
-    function AddFace(const AVertices: array of IBGRAVertex3D): IBGRAFace3D;
+    procedure SetMaterial(const AValue: IBGRAMaterial3D);
+    procedure SetParentLighting(const AValue: boolean);
+    procedure SetTexture(const AValue: IBGRAScanner);
+    procedure ComputeWithMatrix(constref AMatrix: TMatrix3D; constref AProjection: TProjection3D);
+    procedure RemoveUnusedVertices;
+    function AddFaceReversed(const AVertices: array of IBGRAVertex3D): IBGRAFace3D;
+    function AddFace(const AVertices: array of IBGRAVertex3D): IBGRAFace3D;
     function AddFace(const AVertices: array of IBGRAVertex3D; ABiface: boolean): IBGRAFace3D;
     function AddFace(const AVertices: array of IBGRAVertex3D; ATexture: IBGRAScanner): IBGRAFace3D;
     function AddFace(const AVertices: array of IBGRAVertex3D; AColor: TBGRAPixel): IBGRAFace3D;
@@ -292,7 +292,7 @@ type
     property LightingNormal: TLightingNormal3D read GetLightingNormal write SetLightingNormal;
     property ParentLighting: boolean read GetParentLighting write SetParentLighting;
     property TotalVertexCount: integer read GetTotalVertexCount;
-    property Material: IBGRAMaterial3D read GetMaterial write SetMaterial;
-    property Scene: TBGRAScene3D read GetScene;
-    property RefCount: integer read GetRefCount;
-  end;
+    property Material: IBGRAMaterial3D read GetMaterial write SetMaterial;
+    property Scene: TBGRAScene3D read GetScene;
+    property RefCount: integer read GetRefCount;
+  end;
diff -rupN bgrabitmap7.2/bgrascene3d.pas bgrabitmap7.2p/bgrascene3d.pas
--- bgrabitmap7.2/bgrascene3d.pas	2012-07-26 13:32:20.000000000 +0200
+++ bgrabitmap7.2p/bgrascene3d.pas	2013-08-20 14:32:12.000000000 +0200
@@ -196,13 +196,13 @@ type
     function AddFace(const AVertices: array of IBGRAVertex3D): IBGRAFace3D;
     function AddFace(const AVertices: array of IBGRAVertex3D; ABiface: boolean): IBGRAFace3D;
     function AddFace(const AVertices: array of IBGRAVertex3D; ATexture: IBGRAScanner): IBGRAFace3D;
-    function AddFace(const AVertices: array of IBGRAVertex3D; AColor: TBGRAPixel): IBGRAFace3D;
-    function AddFace(const AVertices: array of IBGRAVertex3D; AColors: array of TBGRAPixel): IBGRAFace3D;
-    function AddFaceReversed(const AVertices: array of IBGRAVertex3D): IBGRAFace3D;
-    procedure ComputeWithMatrix(const AMatrix: TMatrix3D; const AProjection: TProjection3D);
-    function GetColor: TBGRAPixel;
-    function GetLight: Single;
-    function GetTexture: IBGRAScanner;
+    function AddFace(const AVertices: array of IBGRAVertex3D; AColor: TBGRAPixel): IBGRAFace3D;
+    function AddFace(const AVertices: array of IBGRAVertex3D; AColors: array of TBGRAPixel): IBGRAFace3D;
+    function AddFaceReversed(const AVertices: array of IBGRAVertex3D): IBGRAFace3D;
+    procedure ComputeWithMatrix(constref AMatrix: TMatrix3D; constref AProjection: TProjection3D);
+    function GetColor: TBGRAPixel;
+    function GetLight: Single;
+    function GetTexture: IBGRAScanner;
     function GetMainPart: IBGRAPart3D;
     function GetLightingNormal: TLightingNormal3D;
     function GetParentLighting: boolean;
@@ -1549,13 +1549,13 @@ end;
 
 procedure TBGRAObject3D.SetParentLighting(const AValue: boolean);
 begin
-  FParentLighting:= AValue;
-end;
-
-procedure TBGRAObject3D.ComputeWithMatrix(const AMatrix: TMatrix3D; const AProjection: TProjection3D);
-var
-  i: Integer;
-begin
+  FParentLighting:= AValue;
+end;
+
+procedure TBGRAObject3D.ComputeWithMatrix(constref AMatrix: TMatrix3D; constref AProjection: TProjection3D);
+var
+  i: Integer;
+begin
   FMainPart.ComputeWithMatrix(AMatrix,AProjection);
   for i := 0 to FFaceCount-1 do
     FFaces[i].ComputeViewNormalAndCenter;
@@ -2994,7 +2994,7 @@ begin
         UseMaterial(face.MaterialName,face);
     end;
   end;
-end;
-
-end.
-
+end;
+
+end.
+
diff -rupN bgrabitmap7.2/bgrasse.pas bgrabitmap7.2p/bgrasse.pas
--- bgrabitmap7.2/bgrasse.pas	2013-02-18 12:13:20.000000000 +0100
+++ bgrabitmap7.2p/bgrasse.pas	2013-08-20 14:31:15.000000000 +0200
@@ -46,16 +46,16 @@ type
   {$IFDEF BGRASSE_AVAILABLE}
   procedure ClearPoint3D_128_AlignedSSE(out v: TPoint3D_128);
   {$ENDIF}
-  function IsPoint3D_128_Zero(const v: TPoint3D_128): boolean; inline;
-
-var
-  Add3D_Aligned : procedure (var dest: TPoint3D_128; const src: TPoint3D_128);
-  Normalize3D_128 : procedure (var v: TPoint3D_128);
-  VectProduct3D_128 : procedure (const u,v: TPoint3D_128; out w: TPoint3D_128);
-  DotProduct3D_128 : function (const v1,v2: TPoint3D_128): single;
-
-const
-  Point3D_128_Zero : TPoint3D_128 = (x:0; y:0; z:0; t:0);
+  function IsPoint3D_128_Zero(const v: TPoint3D_128): boolean; inline;
+
+var
+  Add3D_Aligned : procedure (var dest: TPoint3D_128; constref src: TPoint3D_128);
+  Normalize3D_128 : procedure (var v: TPoint3D_128);
+  VectProduct3D_128 : procedure (const u,v: TPoint3D_128; out w: TPoint3D_128);
+  DotProduct3D_128 : function (constref v1,v2: TPoint3D_128): single;
+
+const
+  Point3D_128_Zero : TPoint3D_128 = (x:0; y:0; z:0; t:0);
 
 type
 
@@ -151,22 +151,22 @@ begin
   result.z := v1.z+v2.z;
   result.t := 0;
 end;
-{$endif}
-
-{$ifdef BGRASSE_AVAILABLE}
-procedure Add3D_AlignedSSE(var dest: TPoint3D_128; const src: TPoint3D_128); assembler;
-asm
-  movaps xmm0, [dest]
-  movups xmm1, [src]
+{$endif}
+
+{$ifdef BGRASSE_AVAILABLE}
+procedure Add3D_AlignedSSE(var dest: TPoint3D_128; constref src: TPoint3D_128); assembler;
+asm
+  movaps xmm0, [dest]
+  movups xmm1, [src]
   addps xmm0, xmm1
   movaps [dest], xmm0
-end;
-{$endif}
-
-procedure Add3D_NoSSE(var dest: TPoint3D_128; const src: TPoint3D_128);
-{$ifdef CPUI386} assembler;
-asm
-  db $d9, $00 //flds [eax]
+end;
+{$endif}
+
+procedure Add3D_NoSSE(var dest: TPoint3D_128; constref src: TPoint3D_128);
+{$ifdef CPUI386} assembler;
+asm
+  db $d9, $00 //flds [eax]
   db $d8, $02 //fadds [edx]
   db $d9, $18 //fstps [eax]
 
@@ -314,25 +314,25 @@ begin
   result.z := v1.z*factor;
   result.t := 0;
 end;
-{$endif}
-
-{$ifdef BGRASSE_AVAILABLE}
-function DotProduct3D_128_SSE3(const v1,v2: TPoint3D_128): single; assembler;
-asm
-  movups xmm0, [v1]
-  movups xmm1, [v2]
+{$endif}
+
+{$ifdef BGRASSE_AVAILABLE}
+function DotProduct3D_128_SSE3(constref v1,v2: TPoint3D_128): single; assembler;
+asm
+  movups xmm0, [v1]
+  movups xmm1, [v2]
   mulps xmm0, xmm1
 
   haddps xmm0,xmm0
   haddps xmm0,xmm0
   movss [result], xmm0
-end;
-{$endif}
-
-function DotProduct3D_128_NoSSE(const v1,v2: TPoint3D_128): single;
-begin
-  result := v1.x*v2.x + v1.y*v2.y + v1.z*v2.z;
-end;
+end;
+{$endif}
+
+function DotProduct3D_128_NoSSE(constref v1,v2: TPoint3D_128): single;
+begin
+  result := v1.x*v2.x + v1.y*v2.y + v1.z*v2.z;
+end;
 
 procedure Normalize3D_128_NoSSE(var v: TPoint3D_128);
 var len: single;
@@ -471,13 +471,13 @@ begin
   w.y := u.z*v.x-u.x*v.z;
   w.z := u.x*v.Y-u.y*v.x;
   w.t := 0;
-end;
-
-{$ifdef BGRASSE_AVAILABLE}
-procedure VectProduct3D_128_SSE(const u,v: TPoint3D_128; out w: TPoint3D_128); assembler;
-asm
-  {$ifdef cpux86_64}
-  mov rax,u
+end;
+
+{$ifdef BGRASSE_AVAILABLE}
+procedure VectProduct3D_128_SSE(constref u,v: TPoint3D_128; out w: TPoint3D_128); assembler;
+asm
+  {$ifdef cpux86_64}
+  mov rax,u
   movups xmm6,[rax]
   {$else}
   mov eax,u
@@ -622,7 +622,7 @@ initialization
     Normalize3D_128 := @Normalize3D_128_NoSSE;
     VectProduct3D_128 := @VectProduct3D_128_NoSSE;
     DotProduct3D_128 := @DotProduct3D_128_NoSSE;
-  end;
-
-end.
-
+  end;
+
+end.
+
